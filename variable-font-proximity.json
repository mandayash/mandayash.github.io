{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "variable-font-cursor-proximity",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [],
  "files": [
    {
      "path": "/fancy/text/variable-font-cursor-proximity.tsx",
      "content": "\"use client\"\n\nimport React, { forwardRef, useMemo, useRef } from \"react\"\nimport { motion, useAnimationFrame } from \"framer-motion\"\n\ninterface MousePosition {\n  x: number;\n  y: number;\n}\n\nconst useMousePositionRef = (containerRef?: React.RefObject<HTMLElement>) => {\n  const positionRef = useRef<MousePosition>({ x: 0, y: 0 })\n\n  React.useEffect(() => {\n    const updatePosition = (x: number, y: number) => {\n      if (containerRef && containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect()\n        const relativeX = x - rect.left\n        const relativeY = y - rect.top\n        positionRef.current = { x: relativeX, y: relativeY }\n      } else {\n        positionRef.current = { x, y }\n      }\n    }\n\n    const handleMouseMove = (ev: MouseEvent) => {\n      updatePosition(ev.clientX, ev.clientY)\n    }\n\n    window.addEventListener(\"mousemove\", handleMouseMove)\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove)\n    }\n  }, [containerRef])\n\n  return positionRef\n}\n\ninterface TextProps extends React.HTMLAttributes<HTMLSpanElement> {\n  label: string\n  fromFontVariationSettings: string\n  toFontVariationSettings: string\n  containerRef: React.RefObject<HTMLDivElement>\n  radius?: number\n  falloff?: \"linear\" | \"exponential\" | \"gaussian\"\n}\n\nconst VariableFontCursorProximity = forwardRef<HTMLSpanElement, TextProps>(\n  (\n    {\n      label,\n      fromFontVariationSettings,\n      toFontVariationSettings,\n      containerRef,\n      radius = 50,\n      falloff = \"linear\",\n      className,\n      onClick,\n      ...props\n    },\n    ref\n  ) => {\n    const letterRefs = useRef<(HTMLSpanElement | null)[]>([])\n    const interpolatedSettingsRef = useRef<string[]>([])\n    const mousePositionRef = useMousePositionRef(containerRef)\n\n    // Parse the font variation settings strings. see the docs or the demo on how one should look like\n    const parsedSettings = useMemo(() => {\n      const fromSettings = new Map(\n        fromFontVariationSettings\n          .split(\",\")\n          .map((s) => s.trim())\n          .map((s) => {\n            const [name, value] = s.split(\" \")\n            return [name.replace(/['\"]/g, \"\"), parseFloat(value)]\n          })\n      )\n\n      const toSettings = new Map(\n        toFontVariationSettings\n          .split(\",\")\n          .map((s) => s.trim())\n          .map((s) => {\n            const [name, value] = s.split(\" \")\n            return [name.replace(/['\"]/g, \"\"), parseFloat(value)]\n          })\n      )\n\n      return Array.from(fromSettings.entries()).map(([axis, fromValue]) => ({\n        axis,\n        fromValue,\n        toValue: toSettings.get(axis) ?? fromValue,\n      }))\n    }, [fromFontVariationSettings, toFontVariationSettings])\n\n    const calculateDistance = (\n      x1: number,\n      y1: number,\n      x2: number,\n      y2: number\n    ): number => {\n      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\n    }\n\n    const calculateFalloff = (distance: number): number => {\n      const normalizedDistance = Math.min(Math.max(1 - distance / radius, 0), 1)\n\n      switch (falloff) {\n        case \"exponential\":\n          return Math.pow(normalizedDistance, 2)\n        case \"gaussian\":\n          return Math.exp(-Math.pow(distance / (radius / 2), 2) / 2)\n        case \"linear\":\n        default:\n          return normalizedDistance\n      }\n    }\n\n    useAnimationFrame(() => {\n      if (!containerRef.current) return\n      const containerRect = containerRef.current.getBoundingClientRect()\n\n      letterRefs.current.forEach((letterRef, index) => {\n        if (!letterRef) return\n\n        const rect = letterRef.getBoundingClientRect()\n        const letterCenterX = rect.left + rect.width / 2 - containerRect.left\n        const letterCenterY = rect.top + rect.height / 2 - containerRect.top\n\n        const distance = calculateDistance(\n          mousePositionRef.current.x,\n          mousePositionRef.current.y,\n          letterCenterX,\n          letterCenterY\n        )\n\n        if (distance >= radius) {\n          if (\n            letterRef.style.fontVariationSettings !== fromFontVariationSettings\n          ) {\n            letterRef.style.fontVariationSettings = fromFontVariationSettings\n          }\n          return\n        }\n\n        const falloffValue = calculateFalloff(distance)\n\n        const newSettings = parsedSettings\n          .map(({ axis, fromValue, toValue }) => {\n            const interpolatedValue =\n              fromValue + (toValue - fromValue) * falloffValue\n            return `'${axis}' ${interpolatedValue}`\n          })\n          .join(\", \")\n\n        interpolatedSettingsRef.current[index] = newSettings\n        letterRef.style.fontVariationSettings = newSettings\n      })\n    })\n\n    const words = label.split(\" \")\n    let letterIndex = 0\n\n    return (\n      <span\n        ref={ref}\n        className={`${className} inline`}\n        onClick={onClick}\n        {...props}\n      >\n        {words.map((word, wordIndex) => (\n          <span\n            key={wordIndex}\n            className=\"inline-block whitespace-nowrap\"\n            aria-hidden\n          >\n            {word.split(\"\").map((letter) => {\n              const currentLetterIndex = letterIndex++\n              return (\n                <motion.span\n                  key={currentLetterIndex}\n                  ref={(el: HTMLSpanElement | null) => {\n                    letterRefs.current[currentLetterIndex] = el\n                  }}\n                  className=\"inline-block\"\n                  aria-hidden=\"true\"\n                  style={{\n                    fontVariationSettings:\n                      interpolatedSettingsRef.current[currentLetterIndex],\n                  }}\n                >\n                  {letter}\n                </motion.span>\n              )\n            })}\n            {wordIndex < words.length - 1 && (\n              <span className=\"inline-block\">&nbsp;</span>\n            )}\n          </span>\n        ))}\n        <span className=\"sr-only\">{label}</span>\n      </span>\n    )\n  }\n)\n\nVariableFontCursorProximity.displayName = \"VariableFontCursorProximity\"\nexport default VariableFontCursorProximity\n",
      "type": "registry:ui",
      "target": "components/ui/variable-font-cursor-proximity.tsx"
    }
  ]
}